[Error]
enum OrderbookError {
    "InitializeAlreadyCalled",
    "NotInitialized",
    "TaskError",
    "TokenError",
};

[Enum]
interface OrderbookResponse {
    Shutdown();
    OrderbookSummary(Summary summary);
    Failed(string reason);
};

dictionary Summary {
    string spread;
    sequence<Level> bids;
    sequence<Level> asks;
};

dictionary Level {
    string exchange;
    string price;
    string amount;
};

interface Orderbook {
    constructor();

    // Try to get the book summary stream going
    [Throws=OrderbookError]
    u64 summary(string symbol);
};

namespace OrderbookClient {
    // Initialize the Orderbook API client in a separate thread. This returns
    // immediately.
    [Throws=OrderbookError]
    u64 orderbook_client_initialize(string token, string endpoint, OnOrderbookClientEvents callbacks);

    // Shut down the Orderbook API client in a separate thread. This returns
    // immediately.
    [Throws=OrderbookError]
    u64 orderbook_client_shutdown();
 };

callback interface OnOrderbookClientEvents {
    // called after initialization is complete, have to do this because we can't have enums that
    // contain object interfaces, otherwise we'd just use the completed callback with an
    // OrderbookResponse::Initialize(orderbooK)...oh well
    void initialized(u64 id, Orderbook orderbook);

    // catch all callback
    void completed(u64 id, OrderbookResponse resp);
};
